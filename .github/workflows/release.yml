# This is a basic workflow to help you get started with Actions

name: build release binaries

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_dispatch:
    inputs:
      tag: 
        description: 'Release version'     
        required: true
        default: '1.0.0'


env:
  linux-binary-path: addons/dardanbujupaj.recorder/gif-exporter/bin/linux/
  linux-binary-filename: libexporter-x86_64.so
  macos-binary-path: addons/dardanbujupaj.recorder/gif-exporter/bin/macos/
  macos-binary-filename: libexporter-x86_64.dylib
  macos-binary-filename-arm64: libexporter-arm64.dylib
  windows-binary-path: addons/dardanbujupaj.recorder/gif-exporter/bin/windows/
  windows-binary-filename: libexporter-x86_64.dll
  plugin-configuration: addons/dardanbujupaj.recorder/plugin.cfg


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release-version:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-release-version.outputs.VERSION}}

    steps:
      - uses: actions/checkout@v2

      - name: Install semver
        run: npm install -g semver

      - id: previous-version
        run: echo "::set-output name=PREVIOUS_VERSION::$(semver $(git tag | sort -V | tail -n1))"

      - id: get-release-version
        run: echo "::set-output name=VERSION::$(semver ${{ github.event.inputs.tag }})"
      
      - id: check-version-increment
        run: semver -r ">${{steps.previous-version.outputs.PREVIOUS_VERSION}}" ${{steps.get-release-version.outputs.VERSION}}


  # This workflow contains a single job called "build"
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: release-version

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: brew install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release -j2
      
      - name: Compile binary
        run: scons platform=linux target=release

      - uses: actions/upload-artifact@v2
        with:
          name: linux-binary
          path: ${{env.linux-binary-path}}${{env.linux-binary-filename}}


  build-macos:
    # The type of runner that the job will run on
    runs-on: macos-latest

    needs: release-version


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: brew install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release -j3
      
      - name: Compile binary
        run: scons platform=macos target=release

      - uses: actions/upload-artifact@v2
        with:
          name: macos-binary
          path: ${{env.macos-binary-path}}${{env.macos-binary-filename}}

  build-macos-arm64:
    # The type of runner that the job will run on
    runs-on: macos-latest

    needs: release-version

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Select Xcode version
        run: |
          sudo xcode-select -s "/Applications/Xcode_12.4.app"
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: brew install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release arch=arm64 -j3
      
      - name: Compile binary
        run: scons platform=macos target=release arch=arm64

      - uses: actions/upload-artifact@v2
        with:
          name: macos-binary-arm64
          path: ${{env.macos-binary-path}}${{env.macos-binary-filename-arm64}}
  


  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-latest
  
    needs: release-version

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: pip install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        shell: cmd
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release -j2
      
      - name: Compile binary
        shell: cmd
        run: |
          scons platform=windows target=release
      
      - uses: actions/upload-artifact@v2
        with:
          name: windows-binary
          path: ${{env.windows-binary-path}}${{env.windows-binary-filename}}
      
  
  tag-release:
    runs-on: ubuntu-latest

    needs: [release-version, build-linux, build-macos, build-macos-arm64, build-windows]

    env:
      version: ${{ needs.release-version.outputs.version }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # delete old binaries
      - run: rm -rf ${{env.linux-binary-path}} ${{env.macos-binary-path}} ${{env.windows-binary-path}}
      - run: mkdir ${{env.linux-binary-path}} ${{env.macos-binary-path}} ${{env.windows-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: linux-binary
          path: ${{env.linux-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: macos-binary
          path: ${{env.macos-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: macos-binary-arm64
          path: ${{env.macos-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: windows-binary
          path: ${{env.windows-binary-path}}

      - name: Update plugin configuration version
        run: sed 's/version.*/version="${{env.version}}"/' ${{ env.plugin-configuration }}
      
      - name: Configurate git
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'dardanbujupaj@users.noreply.github.com
        
      - name: Commit release
        run: |
          git add ${{ env.plugin-configuration }}
          git add -f ${{ env.linux-binary-path }} ${{ env.macos-binary-path }} ${{ env.windows-binary-path }}
          git commit -am "Update binaries for release ${{ env.version }}"
          git push

      - name: Tag release
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'dardanbujupaj@users.noreply.github.com'
          git tag ${{ env-version }}
          git push --tags


        
        
        
        
        
