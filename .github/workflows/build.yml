# This is a basic workflow to help you get started with Actions

name: build release binaries

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_dispatch:
    inputs:
      tag: 
        description: 'Release tag'     
        required: true
        default: 'v0.0.0'


env:
  linux-binary-path: addons/dardanbujupaj.recorder/gif-exporter/bin/linux/
  linux-binary-filename: libexporter.so
  macos-binary-path: addons/dardanbujupaj.recorder/gif-exporter/bin/macos/
  macos-binary-filename: libexporter.dylib
  windows-binary-path: addons/dardanbujupaj.recorder/gif-exporter/bin/windows/
  windows-binary-filename: libexporter.dll


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: brew install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release -j2
      
      - name: Compile binary
        run: scons platform=linux target=release

      - uses: actions/upload-artifact@v2
        with:
          name: linux-binary
          path: ${{env.linux-binary-path}}


  build-macos:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: brew install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release -j2
      
      - name: Compile binary
        run: scons platform=macos target=release

      - uses: actions/upload-artifact@v2
        with:
          name: macos-binary
          path: ${{env.macos-binary-path}}
    

  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install scons
        run: pip install scons

      # Runs a set of commands using the runners shell
      - name: Compile headers
        shell: cmd
        run: |
          cd godot-cpp
          scons generate_bindings=yes target=release -j2
      
      - name: Compile binary
        shell: cmd
        run: |
          scons platform=windows target=release
      
      - uses: actions/upload-artifact@v2
        with:
          name: windows-binary
          path: ${{env.windows-binary-path}}
  
  
  tag-release:
    runs-on: ubuntu-latest

    needs: [build-linux, build-macos, build-windows]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # delete old binaries
      - run: rm ${{env.linux-binary-path}} ${{env.macos-binary-path}} ${{env.windows-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: linux-binary
          path: ${{env.linux-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: macos-binary
          path: ${{env.macos-binary-path}}

      - uses: actions/download-artifact@v2
        with:
          name: windows-binary
          path: ${{env.windows-binary-path}}


      - name: Commit binaries
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'dardanbujupaj@users.noreply.github.com'
          git add -f ${{env.linux-binary-path}} ${{env.macos-binary-path}} ${{env.windows-binary-path}}
          git commit -am "Update binaries for release ${{ github.event.inputs.tag }}"
          git push

      - name: Tag release
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'dardanbujupaj@users.noreply.github.com'
          git tag ${{ github.event.inputs.tag }}
          git push --tags


        
        
        
        
        
